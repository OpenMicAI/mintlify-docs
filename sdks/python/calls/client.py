# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.call_response import CallResponse
from ..types.list_calls_response import ListCallsResponse
from .raw_client import AsyncRawCallsClient, RawCallsClient
from .types.get_v_1_calls_request_call_status import GetV1CallsRequestCallStatus
from .types.get_v_1_calls_request_call_type import GetV1CallsRequestCallType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class CallsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawCallsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawCallsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawCallsClient
        """
        return self._raw_client

    def create_phone_call(
        self,
        *,
        from_number: str,
        to_number: str,
        override_agent_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        dynamic_variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CallResponse:
        """
        Create a new outbound phone call.

        Parameters
        ----------
        from_number : str
            The number you own in E.164 format. Must be a number purchased from OpenMic.

        to_number : str
            The number you want to call in E.164 format.

        override_agent_id : typing.Optional[str]
            The bot UID to override the default agent.

        customer_id : typing.Optional[str]
            Customer identifier for tracking

        dynamic_variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Send dynamic variables in key value pairs to replace in the prompt.

        callback_url : typing.Optional[str]
            Callback URL to receive call events.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CallResponse
            Call created successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.calls.create_phone_call(
            from_number="+1234567890",
            to_number="+0987654321",
            override_agent_id="bvrg8wzi487w02m2bc7dh0ev",
            customer_id="customer_001",
            dynamic_variables={"name": "John"},
            callback_url="https://example.com/callback",
        )
        """
        _response = self._raw_client.create_phone_call(
            from_number=from_number,
            to_number=to_number,
            override_agent_id=override_agent_id,
            customer_id=customer_id,
            dynamic_variables=dynamic_variables,
            callback_url=callback_url,
            request_options=request_options,
        )
        return _response.data

    def get_call(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> CallResponse:
        """
        Retrieve details of a specific call by its ID.

        Parameters
        ----------
        id : str
            The unique identifier of the call

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CallResponse
            Call details retrieved successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.calls.get_call(
            id="id",
        )
        """
        _response = self._raw_client.get_call(id, request_options=request_options)
        return _response.data

    def list_calls(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        customer_id: typing.Optional[str] = None,
        from_number: typing.Optional[str] = None,
        to_number: typing.Optional[str] = None,
        bot_id: typing.Optional[str] = None,
        from_date: typing.Optional[dt.datetime] = None,
        to_date: typing.Optional[dt.datetime] = None,
        call_status: typing.Optional[GetV1CallsRequestCallStatus] = None,
        call_type: typing.Optional[GetV1CallsRequestCallType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListCallsResponse:
        """
        Retrieve all calls with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of calls to return (1-100)

        offset : typing.Optional[int]
            Number of calls to skip

        customer_id : typing.Optional[str]
            Filter by customer ID

        from_number : typing.Optional[str]
            Filter by originating phone number

        to_number : typing.Optional[str]
            Filter by destination phone number

        bot_id : typing.Optional[str]
            Filter by bot ID

        from_date : typing.Optional[dt.datetime]
            Filter calls from this date (ISO 8601 format)

        to_date : typing.Optional[dt.datetime]
            Filter calls to this date (ISO 8601 format)

        call_status : typing.Optional[GetV1CallsRequestCallStatus]
            Filter by call status

        call_type : typing.Optional[GetV1CallsRequestCallType]
            Filter by call type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCallsResponse
            List of calls retrieved successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.calls.list_calls()
        """
        _response = self._raw_client.list_calls(
            limit=limit,
            offset=offset,
            customer_id=customer_id,
            from_number=from_number,
            to_number=to_number,
            bot_id=bot_id,
            from_date=from_date,
            to_date=to_date,
            call_status=call_status,
            call_type=call_type,
            request_options=request_options,
        )
        return _response.data


class AsyncCallsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawCallsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawCallsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawCallsClient
        """
        return self._raw_client

    async def create_phone_call(
        self,
        *,
        from_number: str,
        to_number: str,
        override_agent_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        dynamic_variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> CallResponse:
        """
        Create a new outbound phone call.

        Parameters
        ----------
        from_number : str
            The number you own in E.164 format. Must be a number purchased from OpenMic.

        to_number : str
            The number you want to call in E.164 format.

        override_agent_id : typing.Optional[str]
            The bot UID to override the default agent.

        customer_id : typing.Optional[str]
            Customer identifier for tracking

        dynamic_variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Send dynamic variables in key value pairs to replace in the prompt.

        callback_url : typing.Optional[str]
            Callback URL to receive call events.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CallResponse
            Call created successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.calls.create_phone_call(
                from_number="+1234567890",
                to_number="+0987654321",
                override_agent_id="bvrg8wzi487w02m2bc7dh0ev",
                customer_id="customer_001",
                dynamic_variables={"name": "John"},
                callback_url="https://example.com/callback",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_phone_call(
            from_number=from_number,
            to_number=to_number,
            override_agent_id=override_agent_id,
            customer_id=customer_id,
            dynamic_variables=dynamic_variables,
            callback_url=callback_url,
            request_options=request_options,
        )
        return _response.data

    async def get_call(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> CallResponse:
        """
        Retrieve details of a specific call by its ID.

        Parameters
        ----------
        id : str
            The unique identifier of the call

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CallResponse
            Call details retrieved successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.calls.get_call(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_call(id, request_options=request_options)
        return _response.data

    async def list_calls(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        customer_id: typing.Optional[str] = None,
        from_number: typing.Optional[str] = None,
        to_number: typing.Optional[str] = None,
        bot_id: typing.Optional[str] = None,
        from_date: typing.Optional[dt.datetime] = None,
        to_date: typing.Optional[dt.datetime] = None,
        call_status: typing.Optional[GetV1CallsRequestCallStatus] = None,
        call_type: typing.Optional[GetV1CallsRequestCallType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListCallsResponse:
        """
        Retrieve all calls with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of calls to return (1-100)

        offset : typing.Optional[int]
            Number of calls to skip

        customer_id : typing.Optional[str]
            Filter by customer ID

        from_number : typing.Optional[str]
            Filter by originating phone number

        to_number : typing.Optional[str]
            Filter by destination phone number

        bot_id : typing.Optional[str]
            Filter by bot ID

        from_date : typing.Optional[dt.datetime]
            Filter calls from this date (ISO 8601 format)

        to_date : typing.Optional[dt.datetime]
            Filter calls to this date (ISO 8601 format)

        call_status : typing.Optional[GetV1CallsRequestCallStatus]
            Filter by call status

        call_type : typing.Optional[GetV1CallsRequestCallType]
            Filter by call type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListCallsResponse
            List of calls retrieved successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.calls.list_calls()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_calls(
            limit=limit,
            offset=offset,
            customer_id=customer_id,
            from_number=from_number,
            to_number=to_number,
            bot_id=bot_id,
            from_date=from_date,
            to_date=to_date,
            call_status=call_status,
            call_type=call_type,
            request_options=request_options,
        )
        return _response.data
