# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.call_response import CallResponse
from ..types.error import Error
from ..types.list_calls_response import ListCallsResponse
from .types.get_v_1_calls_request_call_status import GetV1CallsRequestCallStatus
from .types.get_v_1_calls_request_call_type import GetV1CallsRequestCallType

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawCallsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create_phone_call(
        self,
        *,
        from_number: str,
        to_number: str,
        override_agent_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        dynamic_variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[CallResponse]:
        """
        Create a new outbound phone call.

        Parameters
        ----------
        from_number : str
            The number you own in E.164 format. Must be a number purchased from OpenMic.

        to_number : str
            The number you want to call in E.164 format.

        override_agent_id : typing.Optional[str]
            The bot UID to override the default agent.

        customer_id : typing.Optional[str]
            Customer identifier for tracking

        dynamic_variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Send dynamic variables in key value pairs to replace in the prompt.

        callback_url : typing.Optional[str]
            Callback URL to receive call events.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CallResponse]
            Call created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/create-phone-call",
            method="POST",
            json={
                "from_number": from_number,
                "to_number": to_number,
                "override_agent_id": override_agent_id,
                "customer_id": customer_id,
                "dynamic_variables": dynamic_variables,
                "callback_url": callback_url,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CallResponse,
                    parse_obj_as(
                        type_=CallResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_call(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[CallResponse]:
        """
        Retrieve details of a specific call by its ID.

        Parameters
        ----------
        id : str
            The unique identifier of the call

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[CallResponse]
            Call details retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/call/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CallResponse,
                    parse_obj_as(
                        type_=CallResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def list_calls(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        customer_id: typing.Optional[str] = None,
        from_number: typing.Optional[str] = None,
        to_number: typing.Optional[str] = None,
        bot_id: typing.Optional[str] = None,
        from_date: typing.Optional[dt.datetime] = None,
        to_date: typing.Optional[dt.datetime] = None,
        call_status: typing.Optional[GetV1CallsRequestCallStatus] = None,
        call_type: typing.Optional[GetV1CallsRequestCallType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ListCallsResponse]:
        """
        Retrieve all calls with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of calls to return (1-100)

        offset : typing.Optional[int]
            Number of calls to skip

        customer_id : typing.Optional[str]
            Filter by customer ID

        from_number : typing.Optional[str]
            Filter by originating phone number

        to_number : typing.Optional[str]
            Filter by destination phone number

        bot_id : typing.Optional[str]
            Filter by bot ID

        from_date : typing.Optional[dt.datetime]
            Filter calls from this date (ISO 8601 format)

        to_date : typing.Optional[dt.datetime]
            Filter calls to this date (ISO 8601 format)

        call_status : typing.Optional[GetV1CallsRequestCallStatus]
            Filter by call status

        call_type : typing.Optional[GetV1CallsRequestCallType]
            Filter by call type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListCallsResponse]
            List of calls retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/calls",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "customer_id": customer_id,
                "from_number": from_number,
                "to_number": to_number,
                "bot_id": bot_id,
                "from_date": serialize_datetime(from_date) if from_date is not None else None,
                "to_date": serialize_datetime(to_date) if to_date is not None else None,
                "call_status": call_status,
                "call_type": call_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListCallsResponse,
                    parse_obj_as(
                        type_=ListCallsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawCallsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create_phone_call(
        self,
        *,
        from_number: str,
        to_number: str,
        override_agent_id: typing.Optional[str] = OMIT,
        customer_id: typing.Optional[str] = OMIT,
        dynamic_variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = OMIT,
        callback_url: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[CallResponse]:
        """
        Create a new outbound phone call.

        Parameters
        ----------
        from_number : str
            The number you own in E.164 format. Must be a number purchased from OpenMic.

        to_number : str
            The number you want to call in E.164 format.

        override_agent_id : typing.Optional[str]
            The bot UID to override the default agent.

        customer_id : typing.Optional[str]
            Customer identifier for tracking

        dynamic_variables : typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]]
            Send dynamic variables in key value pairs to replace in the prompt.

        callback_url : typing.Optional[str]
            Callback URL to receive call events.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CallResponse]
            Call created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/create-phone-call",
            method="POST",
            json={
                "from_number": from_number,
                "to_number": to_number,
                "override_agent_id": override_agent_id,
                "customer_id": customer_id,
                "dynamic_variables": dynamic_variables,
                "callback_url": callback_url,
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CallResponse,
                    parse_obj_as(
                        type_=CallResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_call(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[CallResponse]:
        """
        Retrieve details of a specific call by its ID.

        Parameters
        ----------
        id : str
            The unique identifier of the call

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[CallResponse]
            Call details retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/call/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    CallResponse,
                    parse_obj_as(
                        type_=CallResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def list_calls(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        customer_id: typing.Optional[str] = None,
        from_number: typing.Optional[str] = None,
        to_number: typing.Optional[str] = None,
        bot_id: typing.Optional[str] = None,
        from_date: typing.Optional[dt.datetime] = None,
        to_date: typing.Optional[dt.datetime] = None,
        call_status: typing.Optional[GetV1CallsRequestCallStatus] = None,
        call_type: typing.Optional[GetV1CallsRequestCallType] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ListCallsResponse]:
        """
        Retrieve all calls with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of calls to return (1-100)

        offset : typing.Optional[int]
            Number of calls to skip

        customer_id : typing.Optional[str]
            Filter by customer ID

        from_number : typing.Optional[str]
            Filter by originating phone number

        to_number : typing.Optional[str]
            Filter by destination phone number

        bot_id : typing.Optional[str]
            Filter by bot ID

        from_date : typing.Optional[dt.datetime]
            Filter calls from this date (ISO 8601 format)

        to_date : typing.Optional[dt.datetime]
            Filter calls to this date (ISO 8601 format)

        call_status : typing.Optional[GetV1CallsRequestCallStatus]
            Filter by call status

        call_type : typing.Optional[GetV1CallsRequestCallType]
            Filter by call type

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListCallsResponse]
            List of calls retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/calls",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "customer_id": customer_id,
                "from_number": from_number,
                "to_number": to_number,
                "bot_id": bot_id,
                "from_date": serialize_datetime(from_date) if from_date is not None else None,
                "to_date": serialize_datetime(to_date) if to_date is not None else None,
                "call_status": call_status,
                "call_type": call_type,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListCallsResponse,
                    parse_obj_as(
                        type_=ListCallsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
