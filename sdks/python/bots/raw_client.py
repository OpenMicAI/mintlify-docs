# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.datetime_utils import serialize_datetime
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..errors.bad_request_error import BadRequestError
from ..errors.conflict_error import ConflictError
from ..errors.internal_server_error import InternalServerError
from ..errors.not_found_error import NotFoundError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.advanced_settings import AdvancedSettings
from ..types.bot_response import BotResponse
from ..types.call_settings import CallSettings
from ..types.create_bot_request_voice_provider import CreateBotRequestVoiceProvider
from ..types.error import Error
from ..types.list_bots_response import ListBotsResponse
from ..types.post_call_settings import PostCallSettings

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawBotsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_bots(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ListBotsResponse]:
        """
        Retrieve all bots with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of bots to return (1-100)

        offset : typing.Optional[int]
            Number of bots to skip

        name : typing.Optional[str]
            Filter by bot name (partial match)

        created_after : typing.Optional[dt.datetime]
            Filter bots created after this date (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter bots created before this date (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ListBotsResponse]
            List of bots retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/bots",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "name": name,
                "created_after": serialize_datetime(created_after) if created_after is not None else None,
                "created_before": serialize_datetime(created_before) if created_before is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListBotsResponse,
                    parse_obj_as(
                        type_=ListBotsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create_bot(
        self,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BotResponse]:
        """
        Create a new bot with specified configuration.

        Parameters
        ----------
        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BotResponse]
            Bot created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/bots",
            method="POST",
            json={
                "name": name,
                "prompt": prompt,
                "first_message": first_message,
                "knowledge_base_id": knowledge_base_id,
                "voice_provider": voice_provider,
                "voice": voice,
                "voice_model": voice_model,
                "voice_speed": voice_speed,
                "llm_model_name": llm_model_name,
                "llm_model_temperature": llm_model_temperature,
                "stt_provider": stt_provider,
                "stt_model": stt_model,
                "call_settings": convert_and_respect_annotation_metadata(
                    object_=call_settings, annotation=CallSettings, direction="write"
                ),
                "advanced_settings": convert_and_respect_annotation_metadata(
                    object_=advanced_settings, annotation=AdvancedSettings, direction="write"
                ),
                "post_call_settings": convert_and_respect_annotation_metadata(
                    object_=post_call_settings, annotation=PostCallSettings, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BotResponse,
                    parse_obj_as(
                        type_=BotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get_bot(
        self, uid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[BotResponse]:
        """
        Retrieve details of a specific bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BotResponse]
            Bot details retrieved successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/bots/{jsonable_encoder(uid)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BotResponse,
                    parse_obj_as(
                        type_=BotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete_bot(self, uid: str, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[None]:
        """
        Delete a bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/bots/{jsonable_encoder(uid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 409:
                raise ConflictError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update_bot(
        self,
        uid: str,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[BotResponse]:
        """
        Update an existing bot's configuration.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[BotResponse]
            Bot updated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/bots/{jsonable_encoder(uid)}",
            method="PATCH",
            json={
                "name": name,
                "prompt": prompt,
                "first_message": first_message,
                "knowledge_base_id": knowledge_base_id,
                "voice_provider": voice_provider,
                "voice": voice,
                "voice_model": voice_model,
                "voice_speed": voice_speed,
                "llm_model_name": llm_model_name,
                "llm_model_temperature": llm_model_temperature,
                "stt_provider": stt_provider,
                "stt_model": stt_model,
                "call_settings": convert_and_respect_annotation_metadata(
                    object_=call_settings, annotation=CallSettings, direction="write"
                ),
                "advanced_settings": convert_and_respect_annotation_metadata(
                    object_=advanced_settings, annotation=AdvancedSettings, direction="write"
                ),
                "post_call_settings": convert_and_respect_annotation_metadata(
                    object_=post_call_settings, annotation=PostCallSettings, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BotResponse,
                    parse_obj_as(
                        type_=BotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawBotsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_bots(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ListBotsResponse]:
        """
        Retrieve all bots with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of bots to return (1-100)

        offset : typing.Optional[int]
            Number of bots to skip

        name : typing.Optional[str]
            Filter by bot name (partial match)

        created_after : typing.Optional[dt.datetime]
            Filter bots created after this date (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter bots created before this date (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ListBotsResponse]
            List of bots retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/bots",
            method="GET",
            params={
                "limit": limit,
                "offset": offset,
                "name": name,
                "created_after": serialize_datetime(created_after) if created_after is not None else None,
                "created_before": serialize_datetime(created_before) if created_before is not None else None,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ListBotsResponse,
                    parse_obj_as(
                        type_=ListBotsResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create_bot(
        self,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BotResponse]:
        """
        Create a new bot with specified configuration.

        Parameters
        ----------
        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BotResponse]
            Bot created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/bots",
            method="POST",
            json={
                "name": name,
                "prompt": prompt,
                "first_message": first_message,
                "knowledge_base_id": knowledge_base_id,
                "voice_provider": voice_provider,
                "voice": voice,
                "voice_model": voice_model,
                "voice_speed": voice_speed,
                "llm_model_name": llm_model_name,
                "llm_model_temperature": llm_model_temperature,
                "stt_provider": stt_provider,
                "stt_model": stt_model,
                "call_settings": convert_and_respect_annotation_metadata(
                    object_=call_settings, annotation=CallSettings, direction="write"
                ),
                "advanced_settings": convert_and_respect_annotation_metadata(
                    object_=advanced_settings, annotation=AdvancedSettings, direction="write"
                ),
                "post_call_settings": convert_and_respect_annotation_metadata(
                    object_=post_call_settings, annotation=PostCallSettings, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BotResponse,
                    parse_obj_as(
                        type_=BotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get_bot(
        self, uid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[BotResponse]:
        """
        Retrieve details of a specific bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BotResponse]
            Bot details retrieved successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/bots/{jsonable_encoder(uid)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BotResponse,
                    parse_obj_as(
                        type_=BotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete_bot(
        self, uid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Delete a bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/bots/{jsonable_encoder(uid)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 409:
                raise ConflictError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update_bot(
        self,
        uid: str,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[BotResponse]:
        """
        Update an existing bot's configuration.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[BotResponse]
            Bot updated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/bots/{jsonable_encoder(uid)}",
            method="PATCH",
            json={
                "name": name,
                "prompt": prompt,
                "first_message": first_message,
                "knowledge_base_id": knowledge_base_id,
                "voice_provider": voice_provider,
                "voice": voice,
                "voice_model": voice_model,
                "voice_speed": voice_speed,
                "llm_model_name": llm_model_name,
                "llm_model_temperature": llm_model_temperature,
                "stt_provider": stt_provider,
                "stt_model": stt_model,
                "call_settings": convert_and_respect_annotation_metadata(
                    object_=call_settings, annotation=CallSettings, direction="write"
                ),
                "advanced_settings": convert_and_respect_annotation_metadata(
                    object_=advanced_settings, annotation=AdvancedSettings, direction="write"
                ),
                "post_call_settings": convert_and_respect_annotation_metadata(
                    object_=post_call_settings, annotation=PostCallSettings, direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    BotResponse,
                    parse_obj_as(
                        type_=BotResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    headers=dict(_response.headers),
                    body=typing.cast(
                        Error,
                        parse_obj_as(
                            type_=Error,  # type: ignore
                            object_=_response.json(),
                        ),
                    ),
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
