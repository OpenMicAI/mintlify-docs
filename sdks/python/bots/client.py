# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.advanced_settings import AdvancedSettings
from ..types.bot_response import BotResponse
from ..types.call_settings import CallSettings
from ..types.create_bot_request_voice_provider import CreateBotRequestVoiceProvider
from ..types.list_bots_response import ListBotsResponse
from ..types.post_call_settings import PostCallSettings
from .raw_client import AsyncRawBotsClient, RawBotsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BotsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBotsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBotsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBotsClient
        """
        return self._raw_client

    def list_bots(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListBotsResponse:
        """
        Retrieve all bots with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of bots to return (1-100)

        offset : typing.Optional[int]
            Number of bots to skip

        name : typing.Optional[str]
            Filter by bot name (partial match)

        created_after : typing.Optional[dt.datetime]
            Filter bots created after this date (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter bots created before this date (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListBotsResponse
            List of bots retrieved successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.bots.list_bots()
        """
        _response = self._raw_client.list_bots(
            limit=limit,
            offset=offset,
            name=name,
            created_after=created_after,
            created_before=created_before,
            request_options=request_options,
        )
        return _response.data

    def create_bot(
        self,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BotResponse:
        """
        Create a new bot with specified configuration.

        Parameters
        ----------
        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BotResponse
            Bot created successfully

        Examples
        --------
        from openmic import AdvancedSettings, CallSettings, OpenmicApi, PostCallSettings

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.bots.create_bot(
            name="Customer Support Bot",
            prompt="You are a helpful customer support assistant. Be polite, professional, and always try to resolve customer issues.",
            first_message="Hello! I'm here to help you with any questions or concerns you may have. How can I assist you today?",
            knowledge_base_id=123,
            voice_provider="OpenAI",
            voice="alloy",
            voice_model="tts-1",
            voice_speed=1.0,
            llm_model_name="gpt-4",
            llm_model_temperature=0.7,
            stt_model="nova-2",
            call_settings=CallSettings(
                max_call_duration=10,
                silence_timeout=15,
                silence_timeout_max_retries=3,
                silence_timeout_message="I didn't hear anything. Are you still there?",
                call_recording_enabled=True,
                voicemail_detection_enabled=True,
                hipaa_compliance_enabled=False,
                pci_compliance_enabled=False,
            ),
            advanced_settings=AdvancedSettings(
                agent_personality="friendly",
                humanize_conversation=True,
                background_noise_reduction=True,
                allow_interruptions=True,
                min_interruption_duration=0.5,
                agent_response_length="normal",
                short_pause=0.3,
                long_pause=1.0,
            ),
            post_call_settings=PostCallSettings(
                summary_prompt="Provide a brief summary of the customer interaction and any action items.",
                success_evaluation_prompt="Rate the success of this call on a scale of 1-10 based on customer satisfaction.",
                success_evaluation_rubric_type="NUMERIC_SCALE",
            ),
        )
        """
        _response = self._raw_client.create_bot(
            name=name,
            prompt=prompt,
            first_message=first_message,
            knowledge_base_id=knowledge_base_id,
            voice_provider=voice_provider,
            voice=voice,
            voice_model=voice_model,
            voice_speed=voice_speed,
            llm_model_name=llm_model_name,
            llm_model_temperature=llm_model_temperature,
            stt_provider=stt_provider,
            stt_model=stt_model,
            call_settings=call_settings,
            advanced_settings=advanced_settings,
            post_call_settings=post_call_settings,
            request_options=request_options,
        )
        return _response.data

    def get_bot(self, uid: str, *, request_options: typing.Optional[RequestOptions] = None) -> BotResponse:
        """
        Retrieve details of a specific bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BotResponse
            Bot details retrieved successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.bots.get_bot(
            uid="uid",
        )
        """
        _response = self._raw_client.get_bot(uid, request_options=request_options)
        return _response.data

    def delete_bot(self, uid: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.bots.delete_bot(
            uid="uid",
        )
        """
        _response = self._raw_client.delete_bot(uid, request_options=request_options)
        return _response.data

    def update_bot(
        self,
        uid: str,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BotResponse:
        """
        Update an existing bot's configuration.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BotResponse
            Bot updated successfully

        Examples
        --------
        from openmic import CallSettings, OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.bots.update_bot(
            uid="uid",
            name="Updated Customer Support Bot",
            prompt="You are an advanced customer support assistant with expertise in technical issues.",
            voice_speed=1.1,
            llm_model_temperature=0.8,
            call_settings=CallSettings(
                max_call_duration=15,
                silence_timeout=20,
            ),
        )
        """
        _response = self._raw_client.update_bot(
            uid,
            name=name,
            prompt=prompt,
            first_message=first_message,
            knowledge_base_id=knowledge_base_id,
            voice_provider=voice_provider,
            voice=voice,
            voice_model=voice_model,
            voice_speed=voice_speed,
            llm_model_name=llm_model_name,
            llm_model_temperature=llm_model_temperature,
            stt_provider=stt_provider,
            stt_model=stt_model,
            call_settings=call_settings,
            advanced_settings=advanced_settings,
            post_call_settings=post_call_settings,
            request_options=request_options,
        )
        return _response.data


class AsyncBotsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBotsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBotsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBotsClient
        """
        return self._raw_client

    async def list_bots(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        name: typing.Optional[str] = None,
        created_after: typing.Optional[dt.datetime] = None,
        created_before: typing.Optional[dt.datetime] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListBotsResponse:
        """
        Retrieve all bots with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of bots to return (1-100)

        offset : typing.Optional[int]
            Number of bots to skip

        name : typing.Optional[str]
            Filter by bot name (partial match)

        created_after : typing.Optional[dt.datetime]
            Filter bots created after this date (ISO 8601 format)

        created_before : typing.Optional[dt.datetime]
            Filter bots created before this date (ISO 8601 format)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListBotsResponse
            List of bots retrieved successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bots.list_bots()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_bots(
            limit=limit,
            offset=offset,
            name=name,
            created_after=created_after,
            created_before=created_before,
            request_options=request_options,
        )
        return _response.data

    async def create_bot(
        self,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BotResponse:
        """
        Create a new bot with specified configuration.

        Parameters
        ----------
        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BotResponse
            Bot created successfully

        Examples
        --------
        import asyncio

        from openmic import (
            AdvancedSettings,
            AsyncOpenmicApi,
            CallSettings,
            PostCallSettings,
        )

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bots.create_bot(
                name="Customer Support Bot",
                prompt="You are a helpful customer support assistant. Be polite, professional, and always try to resolve customer issues.",
                first_message="Hello! I'm here to help you with any questions or concerns you may have. How can I assist you today?",
                knowledge_base_id=123,
                voice_provider="OpenAI",
                voice="alloy",
                voice_model="tts-1",
                voice_speed=1.0,
                llm_model_name="gpt-4",
                llm_model_temperature=0.7,
                stt_model="nova-2",
                call_settings=CallSettings(
                    max_call_duration=10,
                    silence_timeout=15,
                    silence_timeout_max_retries=3,
                    silence_timeout_message="I didn't hear anything. Are you still there?",
                    call_recording_enabled=True,
                    voicemail_detection_enabled=True,
                    hipaa_compliance_enabled=False,
                    pci_compliance_enabled=False,
                ),
                advanced_settings=AdvancedSettings(
                    agent_personality="friendly",
                    humanize_conversation=True,
                    background_noise_reduction=True,
                    allow_interruptions=True,
                    min_interruption_duration=0.5,
                    agent_response_length="normal",
                    short_pause=0.3,
                    long_pause=1.0,
                ),
                post_call_settings=PostCallSettings(
                    summary_prompt="Provide a brief summary of the customer interaction and any action items.",
                    success_evaluation_prompt="Rate the success of this call on a scale of 1-10 based on customer satisfaction.",
                    success_evaluation_rubric_type="NUMERIC_SCALE",
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_bot(
            name=name,
            prompt=prompt,
            first_message=first_message,
            knowledge_base_id=knowledge_base_id,
            voice_provider=voice_provider,
            voice=voice,
            voice_model=voice_model,
            voice_speed=voice_speed,
            llm_model_name=llm_model_name,
            llm_model_temperature=llm_model_temperature,
            stt_provider=stt_provider,
            stt_model=stt_model,
            call_settings=call_settings,
            advanced_settings=advanced_settings,
            post_call_settings=post_call_settings,
            request_options=request_options,
        )
        return _response.data

    async def get_bot(self, uid: str, *, request_options: typing.Optional[RequestOptions] = None) -> BotResponse:
        """
        Retrieve details of a specific bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BotResponse
            Bot details retrieved successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bots.get_bot(
                uid="uid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_bot(uid, request_options=request_options)
        return _response.data

    async def delete_bot(self, uid: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Delete a bot by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bots.delete_bot(
                uid="uid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_bot(uid, request_options=request_options)
        return _response.data

    async def update_bot(
        self,
        uid: str,
        *,
        name: str,
        prompt: str,
        first_message: typing.Optional[str] = OMIT,
        knowledge_base_id: typing.Optional[int] = OMIT,
        voice_provider: typing.Optional[CreateBotRequestVoiceProvider] = OMIT,
        voice: typing.Optional[str] = OMIT,
        voice_model: typing.Optional[str] = OMIT,
        voice_speed: typing.Optional[float] = OMIT,
        llm_model_name: typing.Optional[str] = OMIT,
        llm_model_temperature: typing.Optional[float] = OMIT,
        stt_provider: typing.Optional[typing.Literal["Deepgram"]] = OMIT,
        stt_model: typing.Optional[str] = OMIT,
        call_settings: typing.Optional[CallSettings] = OMIT,
        advanced_settings: typing.Optional[AdvancedSettings] = OMIT,
        post_call_settings: typing.Optional[PostCallSettings] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BotResponse:
        """
        Update an existing bot's configuration.

        Parameters
        ----------
        uid : str
            The unique identifier of the bot

        name : str
            Name of the bot (max 255 characters)

        prompt : str
            System prompt for the bot

        first_message : typing.Optional[str]
            Initial message the bot will send

        knowledge_base_id : typing.Optional[int]
            ID of the knowledge base to use

        voice_provider : typing.Optional[CreateBotRequestVoiceProvider]
            Voice synthesis provider

        voice : typing.Optional[str]
            Voice ID or name

        voice_model : typing.Optional[str]
            Voice model to use

        voice_speed : typing.Optional[float]
            Speech speed multiplier

        llm_model_name : typing.Optional[str]
            Large language model to use

        llm_model_temperature : typing.Optional[float]
            Temperature setting for the LLM

        stt_provider : typing.Optional[typing.Literal["Deepgram"]]
            Speech-to-text provider

        stt_model : typing.Optional[str]
            Speech-to-text model

        call_settings : typing.Optional[CallSettings]

        advanced_settings : typing.Optional[AdvancedSettings]

        post_call_settings : typing.Optional[PostCallSettings]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BotResponse
            Bot updated successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi, CallSettings

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.bots.update_bot(
                uid="uid",
                name="Updated Customer Support Bot",
                prompt="You are an advanced customer support assistant with expertise in technical issues.",
                voice_speed=1.1,
                llm_model_temperature=0.8,
                call_settings=CallSettings(
                    max_call_duration=15,
                    silence_timeout=20,
                ),
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_bot(
            uid,
            name=name,
            prompt=prompt,
            first_message=first_message,
            knowledge_base_id=knowledge_base_id,
            voice_provider=voice_provider,
            voice=voice,
            voice_model=voice_model,
            voice_speed=voice_speed,
            llm_model_name=llm_model_name,
            llm_model_temperature=llm_model_temperature,
            stt_provider=stt_provider,
            stt_model=stt_model,
            call_settings=call_settings,
            advanced_settings=advanced_settings,
            post_call_settings=post_call_settings,
            request_options=request_options,
        )
        return _response.data
