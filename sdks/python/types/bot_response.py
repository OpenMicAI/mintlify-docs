# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .advanced_settings import AdvancedSettings
from .bot_response_voice_provider import BotResponseVoiceProvider
from .call_settings import CallSettings
from .post_call_settings import PostCallSettings


class BotResponse(UniversalBaseModel):
    uid: str = pydantic.Field()
    """
    Unique identifier of the bot
    """

    name: str = pydantic.Field()
    """
    Name of the bot
    """

    prompt: str = pydantic.Field()
    """
    System prompt for the bot
    """

    first_message: typing.Optional[str] = pydantic.Field(default=None)
    """
    Initial message the bot will send
    """

    knowledge_base_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    ID of the knowledge base
    """

    voice_provider: typing.Optional[BotResponseVoiceProvider] = pydantic.Field(default=None)
    """
    Voice synthesis provider
    """

    voice: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice ID or name
    """

    voice_model: typing.Optional[str] = pydantic.Field(default=None)
    """
    Voice model being used
    """

    voice_speed: typing.Optional[float] = pydantic.Field(default=None)
    """
    Speech speed multiplier
    """

    llm_model_name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Large language model being used
    """

    llm_model_temperature: typing.Optional[float] = pydantic.Field(default=None)
    """
    Temperature setting for the LLM
    """

    stt_provider: typing.Optional[typing.Literal["Deepgram"]] = pydantic.Field(default=None)
    """
    Speech-to-text provider
    """

    stt_model: typing.Optional[str] = pydantic.Field(default=None)
    """
    Speech-to-text model
    """

    call_settings: typing.Optional[CallSettings] = None
    advanced_settings: typing.Optional[AdvancedSettings] = None
    post_call_settings: typing.Optional[PostCallSettings] = None
    created_at: dt.datetime = pydantic.Field()
    """
    Bot creation timestamp
    """

    updated_at: dt.datetime = pydantic.Field()
    """
    Bot last update timestamp
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
