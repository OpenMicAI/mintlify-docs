# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata


class CallResponseLatency(UniversalBaseModel):
    """
    Latency metrics for different components
    """

    e_2_e_min_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="e2e_min_latency")] = (
        pydantic.Field(default=None)
    )
    """
    Minimum end-to-end latency in seconds
    """

    e_2_e_median_latency: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="e2e_median_latency")
    ] = pydantic.Field(default=None)
    """
    Median end-to-end latency in seconds
    """

    e_2_e_p_90_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="e2e_p90_latency")] = (
        pydantic.Field(default=None)
    )
    """
    90th percentile end-to-end latency in seconds
    """

    llm_min_latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    Minimum LLM processing latency in seconds
    """

    llm_median_latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    Median LLM processing latency in seconds
    """

    llm_p_90_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="llm_p90_latency")] = (
        pydantic.Field(default=None)
    )
    """
    90th percentile LLM processing latency in seconds
    """

    tts_min_latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    Minimum text-to-speech latency in seconds
    """

    tts_median_latency: typing.Optional[float] = pydantic.Field(default=None)
    """
    Median text-to-speech latency in seconds
    """

    tts_p_90_latency: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="tts_p90_latency")] = (
        pydantic.Field(default=None)
    )
    """
    90th percentile text-to-speech latency in seconds
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
