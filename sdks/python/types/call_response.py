# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .call_response_call_analysis import CallResponseCallAnalysis
from .call_response_call_cost import CallResponseCallCost
from .call_response_call_status import CallResponseCallStatus
from .call_response_call_type import CallResponseCallType
from .call_response_direction import CallResponseDirection
from .call_response_latency import CallResponseLatency


class CallResponse(UniversalBaseModel):
    call_type: CallResponseCallType = pydantic.Field()
    """
    Type of call
    """

    from_number: str = pydantic.Field()
    """
    Originating phone number
    """

    to_number: str = pydantic.Field()
    """
    Destination phone number
    """

    direction: CallResponseDirection = pydantic.Field()
    """
    Call direction
    """

    call_id: str = pydantic.Field()
    """
    Unique call identifier
    """

    agent_id: str = pydantic.Field()
    """
    Bot/agent identifier
    """

    call_status: CallResponseCallStatus = pydantic.Field()
    """
    Current call status
    """

    customer_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Customer identifier
    """

    telephony_identifier: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Telephony system identifiers
    """

    start_timestamp: typing.Optional[int] = pydantic.Field(default=None)
    """
    Call start time (Unix timestamp in milliseconds)
    """

    end_timestamp: typing.Optional[int] = pydantic.Field(default=None)
    """
    Call end time (Unix timestamp in milliseconds)
    """

    duration_ms: typing.Optional[int] = pydantic.Field(default=None)
    """
    Call duration in milliseconds
    """

    transcript: typing.Optional[typing.List[typing.List[str]]] = pydantic.Field(default=None)
    """
    Call transcript as array of [speaker, message] pairs
    """

    recording_url: typing.Optional[str] = pydantic.Field(default=None)
    """
    URL to call recording
    """

    latency: typing.Optional[CallResponseLatency] = pydantic.Field(default=None)
    """
    Latency metrics for different components
    """

    call_analysis: typing.Optional[CallResponseCallAnalysis] = pydantic.Field(default=None)
    """
    Post-call analysis results including summary and success metrics
    """

    call_cost: typing.Optional[CallResponseCallCost] = pydantic.Field(default=None)
    """
    Detailed cost breakdown for the call
    """

    dynamic_variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Send dynamic variables in key value pairs to replace in the prompt.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
