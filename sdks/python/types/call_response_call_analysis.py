# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class CallResponseCallAnalysis(UniversalBaseModel):
    """
    Post-call analysis results including summary and success metrics
    """

    summary: typing.Optional[str] = pydantic.Field(default=None)
    """
    AI-generated summary of the call
    """

    is_successful: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether the call was deemed successful
    """

    success_evaluation: typing.Optional[str] = pydantic.Field(default=None)
    """
    Success evaluation result (e.g., 'good', 'excellent', 'poor')
    """

    extracted_data: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Structured data extracted from the call based on post-call settings
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
