# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.link_bot_to_phone_number_response import LinkBotToPhoneNumberResponse
from ..types.list_phone_numbers_response import ListPhoneNumbersResponse
from ..types.phone_number_response import PhoneNumberResponse
from .raw_client import AsyncRawPhoneNumbersClient, RawPhoneNumbersClient
from .types.link_bot_to_phone_number_request_direction import LinkBotToPhoneNumberRequestDirection
from .types.post_v_1_phone_numbers_unlink_agent_request_direction import PostV1PhoneNumbersUnlinkAgentRequestDirection

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PhoneNumbersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawPhoneNumbersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawPhoneNumbersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawPhoneNumbersClient
        """
        return self._raw_client

    def list_phone_numbers(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        phone_number: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPhoneNumbersResponse:
        """
        Retrieve all phone numbers with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of phone numbers to return (1-100)

        offset : typing.Optional[int]
            Number of phone numbers to skip

        phone_number : typing.Optional[str]
            Filter by phone number (partial match)

        name : typing.Optional[str]
            Filter by name (partial match)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPhoneNumbersResponse
            List of phone numbers retrieved successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.phone_numbers.list_phone_numbers()
        """
        _response = self._raw_client.list_phone_numbers(
            limit=limit, offset=offset, phone_number=phone_number, name=name, request_options=request_options
        )
        return _response.data

    def get_phone_number(
        self, uid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PhoneNumberResponse:
        """
        Retrieve details of a specific phone number by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the phone number

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumberResponse
            Phone number details retrieved successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.phone_numbers.get_phone_number(
            uid="uid",
        )
        """
        _response = self._raw_client.get_phone_number(uid, request_options=request_options)
        return _response.data

    def link_bot_to_phone_number(
        self,
        *,
        phone_number_id: str,
        agent_id: str,
        direction: LinkBotToPhoneNumberRequestDirection,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LinkBotToPhoneNumberResponse:
        """
        Link a bot (agent) to a phone number for inbound/outbound calls.

        Parameters
        ----------
        phone_number_id : str
            Unique identifier of the phone number

        agent_id : str
            Bot UID to link

        direction : LinkBotToPhoneNumberRequestDirection
            Direction for the bot assignment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LinkBotToPhoneNumberResponse
            Bot linked to phone number successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.phone_numbers.link_bot_to_phone_number(
            phone_number_id="ybhb8wzi487w02m2bc7dh0ev",
            agent_id="bvrg8wzi487w02m2bc7dh0ev",
            direction="both",
        )
        """
        _response = self._raw_client.link_bot_to_phone_number(
            phone_number_id=phone_number_id, agent_id=agent_id, direction=direction, request_options=request_options
        )
        return _response.data

    def unlink_bot_from_phone_number(
        self,
        *,
        phone_number_id: str,
        direction: PostV1PhoneNumbersUnlinkAgentRequestDirection,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LinkBotToPhoneNumberResponse:
        """
        Unlink a bot (agent) from a phone number.

        Parameters
        ----------
        phone_number_id : str
            The unique identifier of the phone number

        direction : PostV1PhoneNumbersUnlinkAgentRequestDirection
            Direction to unlink (inbound, outbound, or both)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LinkBotToPhoneNumberResponse
            Bot unlinked from phone number successfully

        Examples
        --------
        from openmic import OpenmicApi

        client = OpenmicApi(
            token="YOUR_TOKEN",
        )
        client.phone_numbers.unlink_bot_from_phone_number(
            phone_number_id="ybhb8wzi487w02m2bc7dh0ev",
            direction="inbound",
        )
        """
        _response = self._raw_client.unlink_bot_from_phone_number(
            phone_number_id=phone_number_id, direction=direction, request_options=request_options
        )
        return _response.data


class AsyncPhoneNumbersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawPhoneNumbersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawPhoneNumbersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawPhoneNumbersClient
        """
        return self._raw_client

    async def list_phone_numbers(
        self,
        *,
        limit: typing.Optional[int] = None,
        offset: typing.Optional[int] = None,
        phone_number: typing.Optional[str] = None,
        name: typing.Optional[str] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ListPhoneNumbersResponse:
        """
        Retrieve all phone numbers with optional filtering and pagination.

        Parameters
        ----------
        limit : typing.Optional[int]
            Maximum number of phone numbers to return (1-100)

        offset : typing.Optional[int]
            Number of phone numbers to skip

        phone_number : typing.Optional[str]
            Filter by phone number (partial match)

        name : typing.Optional[str]
            Filter by name (partial match)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ListPhoneNumbersResponse
            List of phone numbers retrieved successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.phone_numbers.list_phone_numbers()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_phone_numbers(
            limit=limit, offset=offset, phone_number=phone_number, name=name, request_options=request_options
        )
        return _response.data

    async def get_phone_number(
        self, uid: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> PhoneNumberResponse:
        """
        Retrieve details of a specific phone number by its UID.

        Parameters
        ----------
        uid : str
            The unique identifier of the phone number

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumberResponse
            Phone number details retrieved successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.phone_numbers.get_phone_number(
                uid="uid",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_phone_number(uid, request_options=request_options)
        return _response.data

    async def link_bot_to_phone_number(
        self,
        *,
        phone_number_id: str,
        agent_id: str,
        direction: LinkBotToPhoneNumberRequestDirection,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LinkBotToPhoneNumberResponse:
        """
        Link a bot (agent) to a phone number for inbound/outbound calls.

        Parameters
        ----------
        phone_number_id : str
            Unique identifier of the phone number

        agent_id : str
            Bot UID to link

        direction : LinkBotToPhoneNumberRequestDirection
            Direction for the bot assignment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LinkBotToPhoneNumberResponse
            Bot linked to phone number successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.phone_numbers.link_bot_to_phone_number(
                phone_number_id="ybhb8wzi487w02m2bc7dh0ev",
                agent_id="bvrg8wzi487w02m2bc7dh0ev",
                direction="both",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.link_bot_to_phone_number(
            phone_number_id=phone_number_id, agent_id=agent_id, direction=direction, request_options=request_options
        )
        return _response.data

    async def unlink_bot_from_phone_number(
        self,
        *,
        phone_number_id: str,
        direction: PostV1PhoneNumbersUnlinkAgentRequestDirection,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> LinkBotToPhoneNumberResponse:
        """
        Unlink a bot (agent) from a phone number.

        Parameters
        ----------
        phone_number_id : str
            The unique identifier of the phone number

        direction : PostV1PhoneNumbersUnlinkAgentRequestDirection
            Direction to unlink (inbound, outbound, or both)

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        LinkBotToPhoneNumberResponse
            Bot unlinked from phone number successfully

        Examples
        --------
        import asyncio

        from openmic import AsyncOpenmicApi

        client = AsyncOpenmicApi(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.phone_numbers.unlink_bot_from_phone_number(
                phone_number_id="ybhb8wzi487w02m2bc7dh0ev",
                direction="inbound",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.unlink_bot_from_phone_number(
            phone_number_id=phone_number_id, direction=direction, request_options=request_options
        )
        return _response.data
