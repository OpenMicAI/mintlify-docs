/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as OpenmicApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace Calls {
    export interface Options {
        environment?: core.Supplier<environments.OpenmicApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Calls {
    protected readonly _options: Calls.Options;

    constructor(_options: Calls.Options) {
        this._options = _options;
    }

    /**
     * Create a new outbound phone call.
     *
     * @param {OpenmicApi.CreateCallRequest} request
     * @param {Calls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.NotFoundError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.calls.createPhoneCall({
     *         from_number: "+1234567890",
     *         to_number: "+0987654321",
     *         override_agent_id: "bvrg8wzi487w02m2bc7dh0ev",
     *         customer_id: "customer_001",
     *         dynamic_variables: {
     *             "name": "John"
     *         },
     *         callback_url: "https://example.com/callback"
     *     })
     */
    public createPhoneCall(
        request: OpenmicApi.CreateCallRequest,
        requestOptions?: Calls.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.CallResponse> {
        return core.HttpResponsePromise.fromPromise(this.__createPhoneCall(request, requestOptions));
    }

    private async __createPhoneCall(
        request: OpenmicApi.CreateCallRequest,
        requestOptions?: Calls.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.CallResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                "v1/create-phone-call",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OpenmicApi.CallResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new OpenmicApi.NotFoundError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError("Timeout exceeded when calling POST /v1/create-phone-call.");
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve details of a specific call by its ID.
     *
     * @param {string} id - The unique identifier of the call
     * @param {Calls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.NotFoundError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.calls.getCall("id")
     */
    public getCall(
        id: string,
        requestOptions?: Calls.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.CallResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getCall(id, requestOptions));
    }

    private async __getCall(
        id: string,
        requestOptions?: Calls.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.CallResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                `v1/call/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OpenmicApi.CallResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new OpenmicApi.NotFoundError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError("Timeout exceeded when calling GET /v1/call/{id}.");
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve all calls with optional filtering and pagination.
     *
     * @param {OpenmicApi.GetV1CallsRequest} request
     * @param {Calls.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.calls.listCalls()
     */
    public listCalls(
        request: OpenmicApi.GetV1CallsRequest = {},
        requestOptions?: Calls.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.ListCallsResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listCalls(request, requestOptions));
    }

    private async __listCalls(
        request: OpenmicApi.GetV1CallsRequest = {},
        requestOptions?: Calls.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.ListCallsResponse>> {
        const {
            limit,
            offset,
            customer_id: customerId,
            from_number: fromNumber,
            to_number: toNumber,
            bot_id: botId,
            from_date: fromDate,
            to_date: toDate,
            call_status: callStatus,
            call_type: callType,
        } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (customerId != null) {
            _queryParams["customer_id"] = customerId;
        }

        if (fromNumber != null) {
            _queryParams["from_number"] = fromNumber;
        }

        if (toNumber != null) {
            _queryParams["to_number"] = toNumber;
        }

        if (botId != null) {
            _queryParams["bot_id"] = botId;
        }

        if (fromDate != null) {
            _queryParams["from_date"] = fromDate;
        }

        if (toDate != null) {
            _queryParams["to_date"] = toDate;
        }

        if (callStatus != null) {
            _queryParams["call_status"] = callStatus;
        }

        if (callType != null) {
            _queryParams["call_type"] = callType;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                "v1/calls",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OpenmicApi.ListCallsResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError("Timeout exceeded when calling GET /v1/calls.");
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
