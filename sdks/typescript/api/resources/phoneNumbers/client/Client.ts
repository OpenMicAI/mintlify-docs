/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as OpenmicApi from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace PhoneNumbers {
    export interface Options {
        environment?: core.Supplier<environments.OpenmicApiEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class PhoneNumbers {
    protected readonly _options: PhoneNumbers.Options;

    constructor(_options: PhoneNumbers.Options) {
        this._options = _options;
    }

    /**
     * Retrieve all phone numbers with optional filtering and pagination.
     *
     * @param {OpenmicApi.GetV1PhoneNumbersRequest} request
     * @param {PhoneNumbers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.phoneNumbers.listPhoneNumbers()
     */
    public listPhoneNumbers(
        request: OpenmicApi.GetV1PhoneNumbersRequest = {},
        requestOptions?: PhoneNumbers.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.ListPhoneNumbersResponse> {
        return core.HttpResponsePromise.fromPromise(this.__listPhoneNumbers(request, requestOptions));
    }

    private async __listPhoneNumbers(
        request: OpenmicApi.GetV1PhoneNumbersRequest = {},
        requestOptions?: PhoneNumbers.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.ListPhoneNumbersResponse>> {
        const { limit, offset, phone_number: phoneNumber, name } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (limit != null) {
            _queryParams["limit"] = limit.toString();
        }

        if (offset != null) {
            _queryParams["offset"] = offset.toString();
        }

        if (phoneNumber != null) {
            _queryParams["phone_number"] = phoneNumber;
        }

        if (name != null) {
            _queryParams["name"] = name;
        }

        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                "v1/phone-numbers",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: _queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OpenmicApi.ListPhoneNumbersResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError("Timeout exceeded when calling GET /v1/phone-numbers.");
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve details of a specific phone number by its UID.
     *
     * @param {string} uid - The unique identifier of the phone number
     * @param {PhoneNumbers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.NotFoundError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.phoneNumbers.getPhoneNumber("uid")
     */
    public getPhoneNumber(
        uid: string,
        requestOptions?: PhoneNumbers.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.PhoneNumberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__getPhoneNumber(uid, requestOptions));
    }

    private async __getPhoneNumber(
        uid: string,
        requestOptions?: PhoneNumbers.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.PhoneNumberResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                `v1/phone-numbers/${encodeURIComponent(uid)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as OpenmicApi.PhoneNumberResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new OpenmicApi.NotFoundError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError("Timeout exceeded when calling GET /v1/phone-numbers/{uid}.");
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Link a bot (agent) to a phone number for inbound/outbound calls.
     *
     * @param {OpenmicApi.LinkBotToPhoneNumberRequest} request
     * @param {PhoneNumbers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.NotFoundError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.phoneNumbers.linkBotToPhoneNumber({
     *         phone_number_id: "ybhb8wzi487w02m2bc7dh0ev",
     *         agent_id: "bvrg8wzi487w02m2bc7dh0ev",
     *         direction: "both"
     *     })
     */
    public linkBotToPhoneNumber(
        request: OpenmicApi.LinkBotToPhoneNumberRequest,
        requestOptions?: PhoneNumbers.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.LinkBotToPhoneNumberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__linkBotToPhoneNumber(request, requestOptions));
    }

    private async __linkBotToPhoneNumber(
        request: OpenmicApi.LinkBotToPhoneNumberRequest,
        requestOptions?: PhoneNumbers.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.LinkBotToPhoneNumberResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                "v1/phone-numbers/link-agent",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as OpenmicApi.LinkBotToPhoneNumberResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new OpenmicApi.NotFoundError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/phone-numbers/link-agent.",
                );
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Unlink a bot (agent) from a phone number.
     *
     * @param {OpenmicApi.PostV1PhoneNumbersUnlinkAgentRequest} request
     * @param {PhoneNumbers.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link OpenmicApi.BadRequestError}
     * @throws {@link OpenmicApi.UnauthorizedError}
     * @throws {@link OpenmicApi.NotFoundError}
     * @throws {@link OpenmicApi.InternalServerError}
     *
     * @example
     *     await client.phoneNumbers.unlinkBotFromPhoneNumber({
     *         phone_number_id: "ybhb8wzi487w02m2bc7dh0ev",
     *         direction: "inbound"
     *     })
     */
    public unlinkBotFromPhoneNumber(
        request: OpenmicApi.PostV1PhoneNumbersUnlinkAgentRequest,
        requestOptions?: PhoneNumbers.RequestOptions,
    ): core.HttpResponsePromise<OpenmicApi.LinkBotToPhoneNumberResponse> {
        return core.HttpResponsePromise.fromPromise(this.__unlinkBotFromPhoneNumber(request, requestOptions));
    }

    private async __unlinkBotFromPhoneNumber(
        request: OpenmicApi.PostV1PhoneNumbersUnlinkAgentRequest,
        requestOptions?: PhoneNumbers.RequestOptions,
    ): Promise<core.WithRawResponse<OpenmicApi.LinkBotToPhoneNumberResponse>> {
        const _response = await core.fetcher({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.OpenmicApiEnvironment.Default,
                "v1/phone-numbers/unlink-agent",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as OpenmicApi.LinkBotToPhoneNumberResponse,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new OpenmicApi.BadRequestError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 401:
                    throw new OpenmicApi.UnauthorizedError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 404:
                    throw new OpenmicApi.NotFoundError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                case 500:
                    throw new OpenmicApi.InternalServerError(
                        _response.error.body as OpenmicApi.Error_,
                        _response.rawResponse,
                    );
                default:
                    throw new errors.OpenmicApiError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.OpenmicApiError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.OpenmicApiTimeoutError(
                    "Timeout exceeded when calling POST /v1/phone-numbers/unlink-agent.",
                );
            case "unknown":
                throw new errors.OpenmicApiError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
